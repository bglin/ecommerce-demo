from flask import session, Blueprint,request, jsonify
from sqlalchemy import bindparam, and_
from sqlalchemy.sql import update

import json
import datetime
import cx_Oracle

from app.db import db_session
from app.models import Item,Order,Product,Inventory
from app.errors import InvalidUsage

cart_blueprint = Blueprint('cart', __name__,url_prefix='/api/v0/cart/')
# cart = {
#         'items': [
#                 {'product_id': 2123,
#                 'quantity': 12,
#                 'unit_price':65.00
#                 },
#
#             {'product_id':8976,
#                 'quantity': 32,
#                 'unit_price':65.00,
#                 }
#                 ]
#         }

empty_cart = {'items': []}

# curl -v -c cookie.txt -L  http://127.0.0.1:5000/api/v0/cart
@cart_blueprint.route('/', methods = ['GET'])
def init_cart():
    if 'cart' in session:
        # session['cart']['testprod'] = 34
        return(jsonify(session.get('cart')))
    else:
        session['cart'] = empty_cart
        return (jsonify(session.get('cart')))


## curl -v -b cookie.txt  -d '{"prod_id":2343,"quantity": 45}' -L -H "Content-Type: application/json" POST http://127.0.0.1:5000/api/v0/cart/add
@cart_blueprint.route('/add', methods = ['POST'])
def add_to_cart():
    # accepts JSON with product id and quantity,unit price
    ## {product_id: '0001',
    ##  quantity: 34 ,
    ##  unit_price: 23.00,
    ##  image_url: https://xxccdfd}

    cart_item = json.loads(json.dumps(request.json))

    print(session.get('cart')['items'])
    if cart_item['product_id'] not in [item["product_id"] for item in session.get('cart')['items']]:
        session.get('cart')['items'].append(cart_item)
        session.modified = True
        return (jsonify(session.get('cart')))
    else:
        raise InvalidUsage('{0} is already in the cart'.format(cart_item['product_id']),status_code=400)

@cart_blueprint.route('/update/<product_id>', methods = ['PUT'])
def update_item(product_id):

    # updated_item = json.loads(json.dumps(request.json))
    #  url parameter ?action=add ?action=subtract
    action = request.args.get('action')

    for item in session.get('cart')['items']:
        if product_id==item['product_id']:
            if action=='add':
                item.update({"quantity":item.get('quantity') + 1})
            # item.update(updated_item)
                session.modified = True
                return jsonify(session.get('cart'))
            elif action=='subtract':
                item.update({"quantity":item.get('quantity') - 1})
            # item.update(updated_item)
                session.modified = True
                return jsonify(session.get('cart'))
            else:
                raise InvalidUsage('Could not find item to update in cart',status_code=400)

@cart_blueprint.route('/delete/<product_id>', methods = ['DELETE'])
def delete_cart_item(product_id):

    updated_cart = [item for item in session.get('cart')['items'] if item['product_id']!=product_id]
    if len(updated_cart) < len(session.get('cart')['items']):
        session.get('cart')['items'] = updated_cart
        session.modified  = True
        return jsonify(session.get('cart'))
    else:
        raise InvalidUsage('Could not find item to delete in cart',status_code=400)



@cart_blueprint.route('/clear', methods = ['POST'])
def clear_cart():
    session['cart'] = empty_cart
    session.modified = True
    return (jsonify(session.get('cart')))

@cart_blueprint.route('/checkout', methods = ['POST'])
def checkout_cart():
    ## update order,order_items and inventory tables
    # item_x = [{'product_id':'MU-US-001','quantity':1,'unit_price':23.50},{'product_id':'MU-US-002','quantity':1,'unit_price':12.00}]

    print('checkout: {}'.format(session.get('cart')))
    item_list = [Item(item_id ='XX-'+str(count),product_id = item_x['product_id'],quantity = item_x['quantity'],item_total = item_x['unit_price']*item_x['quantity'])
            for count,item_x in enumerate(session.get('cart')['items'])]

    params = [{'prod':item_obj.product_id,'qty':item_obj.quantity} for item_obj in item_list]

    ##check if any of the items ordered are sold out
    out_of_stock = db_session.query(Inventory.product_id,Inventory.quantity).filter(and_(Inventory.product_id.in_([x.get('prod')for x in params]),Inventory.quantity == 0))

    modified_order = False

    if out_of_stock.first():
        for index,item in enumerate(item_list):
            # new items list with out-of-stock items removed
            if item.product_id in [x.product_id for x in out_of_stock]:
                item_list.pop(index)
        ## updated list that only includes items that are in stock
        params = [{'prod':item_obj.product_id,'qty':item_obj.quantity} for item_obj in item_list]
        modified_order = True

    #order_id generated by database
    current_order = Order(order_date = datetime.date.today().strftime('%Y-%m-%d'))

    # naming convention for 1:many relationships is lowercase classname  i.e "order_items" + _collection
    current_order.order_items_collection = item_list

    # calculate order_total
    current_order.order_total = sum([item.item_total for item in current_order.order_items_collection])

    ##  need to decrement quantity in db not in python memory to avoid race conditions, quantity = quantity - x
    def add_to_db(params,db_session,current_order):
        update_stmt = update(Inventory).where(Inventory.product_id == bindparam('prod')).values({Inventory.quantity:Inventory.quantity - bindparam('qty')})
        db_session.execute(update_stmt,params)
        db_session.add(current_order)


    session.get('cart')['items'].clear()
    session.modified = True

    success = 'Your Order Was Successfully Placed!'
    if modified_order and params:
        try:
        ##commit persists data for both the add() and update() statement
            add_to_db(params,db_session,current_order)
            db_session.commit()
            return(jsonify(cart=session.get('cart'),message='Some of the items in your cart were sold out at the time of your order. \n The Rest Of ' + success))

        except cx_Oracle.Error as e:
            db_session.rollback()
            errorObj, = e.args
            raise InvalidUsage('Error Procesing Order \n Error Code: {0} \n Error Message:{1}}'.format(errorObj.code,errorObj.message),status_code = 400)
    elif params:
        try:
            add_to_db(params,db_session,current_order)
            db_session.commit()
            return (jsonify(cart=session.get('cart'),message=success))

        except cx_Oracle.Error as e:
            db_session.rollback()
            errorObj, = e.args
            raise InvalidUsage('Error Procesing Order \n Error Code: {0} \n Error Message:{1}}'.format(errorObj.code,errorObj.message),status_code = 400)
    else:
        return (jsonify(message='There was an error processing your order. \n The items you ordered may have been out of stock '))
